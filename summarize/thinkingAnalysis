ContainerWithMostWater:
运用双指针，当指针往中间移动，面积的长在减小，此时只有宽（高）增加时，面积才可能增加。而宽取决于左右指针中值较小的，所以值较小的指针要发生移动，而值较大的则不变。

LongestSubstringWithoutRepeatingCharacters：
运用隐式双指针：left，维护一个滑动窗口的左边界。右边界i增大，判断left-i的窗口中有无重复元素，自然想到hashset，但是又需要记录重复元素所在的位置，所以进化为hashmap。

ThreeSum;
解法一：循环两个值，用二分查找去寻找第三个值，时间复杂度n^2logn。难点：去重。二分搜索的数组起点为j，末尾为原数组的末尾。此时可以解决重复。
解法二：两个指针，一头一尾。再从头遍历数组，用首尾两个指针去匹配循环的值。难点：去重。
数组排序后可以通过移动首尾两个指针，逼近目标值：比目标值小时，向右移动头指针，比目标值大向左移动尾指针。

FourSum:
解法和ThreeSum类似，但要用用两重循环。去重时i和j都要去重。

ThreeSumCloset:
和ThreeSum思路一致。

NextPermutation:
https://pic.leetcode-cn.com/1df4ae7eb275ba4ab944521f99c84d782d17df804d5c15e249881bafcf106173-file_1555696082944，非常好的思路解释

FindFirstAndLastPositionOfElementInSortedArray:
二分查找和while循环搜索上下界（去重操作的变形）

CombinationSum:
使用深度优先算法搜索。难点：当搜索到一个值比差值（distance)大时，退出此次循环，stack深度-1，并且表明在该startIndex = i这一层没有符合条件的组合。
所以要把candidates[i]从listElement中取出。

combinationSum2：
与CombinationSum的区别：输入的数组会有重复元素，并且不能直接对数组去重；数组的同一个数不能够取多次。
因此，在添加结果时首先要检查返回的列表中是否有该元素，并且在dfs时每次的起点坐标要+1。

isValidBST:
典型的分治算法思想。把一个二叉树分成左右两棵子树进行处理。max和min通过递归，分别保存了当前深度下二叉树中的最大和最小值。
左子树的所有值必须要介于min和root.val之间。右字数必须在root.val和max之间。

RotateImage:
如何把一个方阵旋转90度。顺时针：先求转置，再沿着竖直中线折叠；逆时针：先求转置，再沿着水平中线折叠。

spiralOrder:
模拟路径，在矩阵中移动只有四个方向，在螺旋路径中，每次变换路径只有一种选择，因此可以用两个数组对应表示x,y坐标的移动变换。
用一个和矩阵大小一样的boolean矩阵，记录旋转路径。

SpiralMatrixII:
思路同上

JumpGame:
动态规划：每次移动到一个位置，将该位置标记为可到达。i标志需要判断的那个位置；j表示通过之前，并且在该位置移动nums[j]的距离能否到达i点。最后如果nums.length - 1不可达，则返回false。
贪心算法：保存一个farest标记最远可到达的位置，当一个点的坐标i+nums[i]>farest时更新。如果有一点i> farest则返回false表明改点不可达。

MergeIntervals:
先根据起点对区间数组进行排序，之后从第一个区间的左边界开始判断直到到达边界前一个区间：如果其小于i+1的右边界则i++,并且把右边界修改为更大的值。

uniquePaths：
动态规划。1,将到place[m][n]的所有方法的问题转化为到place[m-1][n]+place[m][n-1]的问题。2，开一个数组arriveWays，从起点开始每经过一个位置记录其到达的次数。3，最后返回arriveWays[m-1][n-1]。

UniquePathsII：
方法同上。在边界上要注意。

MinimumPathSum：
动态规划。方法同uniquePaths。

SetMatrixZeroes:
方法一：用列表存储矩阵中为零的数，在遍历列表中的坐标，把矩阵对应行列的坐标设为零。
方法二：把位置信息直接存储到矩阵中：若某一坐标元素为零，则将其对应行列的首坐标的值设为零。此时（0,0）可能由第一行或者第一列中一个为零的书产生。因此需要额外一个标记，区分是第一行还是第一列产生的。
然后遍历坐标，若发现行列的首坐标有一个为零，则将该行和该列全设为零。最后再判断第一行和第一列是否需要设置。

searchMatrixMethodTwo:
方法一：使用了两次二分搜索。
方法二：使用一次二分搜索。将矩阵的坐标，看成线性的数组坐标，进行值的判断时再使用“取商”和“取余”操作获得线性数组在矩阵中的坐标。

WordSearch:
使用DFS+回溯算法，并且使用方向数组来遍历矩阵中一个点的上下左右。

SubsetII：
DFS+回溯+DFS中排出重复元素。难点：对于结果的去重   if(i != startIndex && nums[i] == nums[i - 1]){continue;}

RemoveDuplicatesFromSortedArrayII：
运用快慢双指针。慢指针指向“新数组的末尾元素”（在原数组上更新元素），快指针去扫描排除重复元素。都是从左向右进行一次扫描。
若需要新数组所有元素都不重复（RemoveDuplicatesFromSortedArray），则只需要新数组的末尾元素和快指针搜索到的元素不相等（nums[slow] != nums[fast]）；
若允许两个重复，则末尾元素可以与快指针搜索到的元素相等，但是末尾之前的一个元素不能和快指针搜索到的元素相等。

SearchInRotatedSortedArrayII:
二分搜索。最坏情况退化为O(n)的时间复杂度{1111011.。。}。重点：当nums[start] == nums[mid]此时要start++,排除重复元素,其他步骤和第一个版本的题目相同。特别注意nums[startIndex] <= target时,end = mid。而不是nums[startIndex] < target.

ConstructBinaryTreeFromPreorderAndInorderTraversal：
1，通过preorder的第一个元素，找到在inorder中的对应位置place。inorder中place左边为node.left，右边为node.right。
2，通过inorder，计算出left的大小和right的大小，并在preorder中找到对应的元素。
3，dfs递归，出口preStart > preEnd。

ConstructBinaryTreeFromInorderAndPostorderTraversal:
思路同上，postorder扮演和preorder相似的作用。

Triangle:
动态规划。
第一种方法：考虑使用二维数组存储到每个点所需要的最短路径，最后比较最后一行的大小尽可得到答案。
第二种方法：使用一维数组。因为一行的结果只与上一行的结果相关，所以只需要在上一行的基础上更新即可。但要特别注意，每一行的更新顺序要从最后一个更新到第一个，否则一行中前面更新的值会影响后面的更新。

MaximumProductSubarray：
动态规划。使用一个二维数组记录数组中每个元素可以得到的最大最小值，因为元素可能为负，而一个负数要最大需要乘以一个最小的负值。

FindMinimumInRotatedSortedArray:
二分搜索。画出旋转数组示意图，找出二分之后的start和end关系即可。
1，当nums[mid]大于returnInt:start = mid。
2,否则end = mid,returnInt = nums[mid]。

FindPeakElement：
二分搜索。
1，nums[mid] > nums[mid+1] && nums[mid] > num[mid - 1]时，mid就为峰值。
2，nums[mid - 1] > nums[mid] > nums[mid + 1],mid的左边有峰值。
3，nums[mid + 1] > nums[mid] > nums[mid - 1],mid的右边有峰值。

SummaryRange:
隐式使用双指针。一个指针定位上边界，一个指针定位下边界。当上边界前一个数-1=当前数，则右边界向右移动，直到不等。此时可以确定一个周期，然后把右边界+1
并把左边界和右边界重合。

MajorityElement:
方法一：使用HashMap,时间复杂度O（1），空间复杂度O（N）。将数组元素作为键，元素出现的次数作为值。
方法二：使用分治算法。（众数在这里定义为出现次数 > nums.length/2）将数组分为左右两个子数组，分别找出子数组的众数，如果两个众数相等则大数组的众数也为该值。否则在大数组中去查询两个众数谁出现次数多，谁就为大数组真正的众数。
方法三：投票算法。设众数的初始值为第一个元素，count = 0。从左到右扫描数组。若nums[i] == 众数，count + 1;否则count - 1。若count = 0，则记该数为众数，继续扫描数组。最后扫描完数组，返回众数。

MajorityElementII：
方法一：HashMap。
方法二：投票算法。选出两个潜在候选人，再遍历数组，计算候选者是否出现次数大于nums.length/3。

ProductOfArrayExceptSelf:
难点：不能使用除法，且要求空间复杂度为常数。从左到右扫描数组，得到每个元素左边的乘积，放入对应的坐标。然后从右到左扫描，得到右边的成绩，并更新到返回数组中。

SubarraySumEqualsK：
求出到i点的和，并更新到nums数组中。Map的键存储能够通过连续数组相加构成的结果，值用来存储得到该结果可以使用的不同的子数组个数。nums[i] - k在Map中，则表明构造出nums[j] = nums[i] - k的方式+1就为在i点构造出k的方式。

FindTheDuplicateNumber:
方法一：二分查找。此时二分的不是数组的区间，而是数值的区间。由于数介于1-n之间，所以中位数的左边如果大于或者等于数组长度中位数，则重复的数不可能比中位数大。于是right = mid.
方法二：快慢指针判断环。数组的val去决定每次移动到的数组的索引，例如nums[nums[i]]就移动到索引为nums[i]的数组坐标上。快指针用nums[nums[i]]，表示每轮可以移动两次；慢指针nums[j]表明每轮移动一次。
当两个指针移动到同一位置。再保留慢指针，再创建一个从头开始的慢指针，不断地循环移动，直到他们相遇，此时nums[相遇的索引]就是需要的结果。
方法三：使用FindAllDuplicatesInAnArray的思路解决。

GameOfLife:
算法层面没啥，主要要注意面向对象的方式写代码。把原来是1,但会变成0的，用-2区分；原来是0，但会变成1的，用-1区分。

ArrayNesting：
在此数组中，所有的n个数会构成至多n个圈（0,1,2,3.。。）。一般情况下如[5,4,0,3,1,6,2]，下标为0,5,6,2会一直循环。因此当访问到一个循环中的下标时，其结果都是一样的。因此使用一个visited[n]来标识是否访问过，未访问才进行计数，否则直接跳过。

FindAllDuplicatesInAnArray和FindAllNumbersDisappearedInAnArray：
思路完全一样。“鸽巢原理”：如果所有 1 - n的元素没有重复，且没有缺失，则值为 i 的数应该处在数组坐标为 i-1 的位置上。如果有缺失则通过交换位置可以让有重复的元素到缺失位置上。
此时，nums[i]就为重复元素，i + 1就为缺失的元素。

CircularArrayLoop:
快慢指针（思想极其重要，要研读代码），三种情况下该位置不能是循环子数组的元素。
1，当前位置和下一个位置，数值符号不同。
2，当前位置和下一个位置，数组坐标相同。
3，之后的位置有一处不符合

TeemoAttacking：
最后一次攻击的毒是一定可以持续duration时间的，但是中间的攻击毒的持续时间不一定能达到。因此关键就是要判断两次攻击之间的间隔是否大于或者等于duration。

ValidTriangleNumber：
排序+二分搜索。i,j坐标去表示两个较小的边，k表示较大的边。去用二分搜索找出j的右边，能使三边构成三角形的最大的边长的坐标k。注意：有可能右边不存在这样的边，因此k的搜索区间为k - 1到nums.length - 1。
若不存在这样的边，此时k与j相等。
使用dfs也可以做出来，但是会超时。

TaskScheduler:
数量多的任务要先去完成，才能使时间最短。因此每一轮循环结束后，根据剩余的数量对任务进行排序。然后再取出任务完成，相应的时间要增加。直到所有的任务完成。

MaximumSubarray:
坐标型动态规划，数组记录当前位置和的最大值。

BestTimeToBuyAndSellStock:
可以将该题的模型转化为上题。如果使用暴力法，则时间复杂度过高，因此将题转化为用动态规划解决。第一天卖出，收益为0；第二天卖出，若价格更高则由收益，否则为零。。数组用于计算当天卖出可以获得的最高收益，benefit[i]依赖于benefit[i-1]，这样可以消除重复计算。

findShortestSubArray：
使用三个hash表分别记录每个元素第一次出现，最后一次出现以及出现次数，出现次数最多的便是数组的degree。最小数组的标准：出现次数 == degree && 最后一次出现 - 第一次出现 + 1 要最小。

LongestTurbulentSubarray:
动态规划。每个元素可以有两种方式形成湍流数组，例如：3>2<4,或者3<4>2。因此使用两个变量记录在这个元素之前，这两种模式的个数，初始为1。
判断当前元素的下一个元素符合哪种模式，并把相应的模式数+1，另一种模式值置为1。

CoinChange：
动态规划。开辟一个数组，记录每种金额用硬币的个数，如果不能构成的用-1表示。
最终状态：f(n) = min{ f(n - i) + 1, f(n - j) + 1, f(n - m) + 1.....}
子问题：将f(n)转化为更小的金额的最少硬币数。
边界情况：当无法用现有硬币构成目标金额时，将该金额记为-1。
计算顺序：从小到大

LongestContinuousIncreasingSubsequence：
动态规划。仅使用两个变量保存当前值和上一个值，空间复杂度O(1)。

CountingBits：
动态规划。例如：170的1的个数 = 170/2的1的个 + 170末尾的1（如果170%2 == 1）

PaintHouse:
序列型动态规划。要求前N栋房子的最低价格 ---> 前N - 1栋房子的最低价格 + 最后一栋的价格；但是要求颜色在相邻之间不同，因此需要保存其颜色信息。
例如：最后一栋房子颜色为红色，则N - 1不能为红色，以此类推。使用遍历来计算第N栋为不同颜色的钱，再遍历第N - 1栋的情况，此时要两栋房颜色不同。
使用滚动数组可以降低空间复杂度。

PaintHouseII:
序列型动态规划。如果我们按照上面的做法，去遍历比较相邻房子颜色不同的最低价格，时间复杂度为O(n.k^2),于是我们利用两个变量保存最小值和次最小值的颜色。
当我们选取到最小值的颜色时，此时前i-1栋房子只能是以次最小值涂漆；当没有选取到最小值的颜色时，前i-1栋房子可以以最小值涂漆。

HouseRobber：
序列型动态规划。记录前N个房子可以获得的最多钱，有可能第N栋没有偷，则就是前N-1栋可以获得的最多钱；若N栋偷了，则偷得最多的钱就是前N-2栋偷得最多的钱 + 第N栋偷得的钱。

BestTimeToBuyAndSellStockIII:
序列型动态规划。根据题意，只能够买卖两次股票，因此每次购买之前都需要知晓有无购买资格。可以将买卖的状态分为5个阶段：1,第一次买之前 --> 2,第一次持有股票 --> 3,卖掉第一次购买的 -->
第二购买 --> 4,持有第二次购买的股票 --> 5,卖掉第二次购买的股票。于是我们要使用一个二维数组:f[price.length + 1][5 + 1]来保存每天每个阶段能获得最大利润。
边界条件：在第0天时，只有可能处于状态1，其他状态不存在用无限小表示。
在状态1,3,5时，如果前一天也是相同的状态则利润不会增加，即f[i][j] = f[i - 1][j]；如果刚好在当天发生了状态的改变，则有可能利润增加需要取Math.max。
在状态2,4时，如果前一天的状态不同，即当天购入了股票则利润会保持不变（我们在卖出股票时才考虑购买股票的成本，直接算出利润）；否则有可能股票会增值或者贬值。

BestTimeToBuyAndSellStockIV:
序列型动态规划。思想和上题几乎一致，只是当 k > prices.length/2时，问题退化为可以无限次买卖股票，此时只要后一天的价格更高我们就在当天买下一天卖出去。（买卖股票ii)

PerfectSquares:
划分型动态规划。已知最后一个有一段，但是最后一段的范围是不知道的，需要通过遍历来寻找符合条件的长度范围。在本题中：f(n) = min{f(n - j*j) + 1}，其中j*j相当于最后一段的长度。
所以我们遍历在[0,i^1/2]范围内遍历j。

PalindromePartitioningII：
划分型动态规划。f(n)表示前n个字符需要分割的最小次数，可以分解为：最后一个长度为k的字符串是回文字符串情况下，计算前n - k个字符需要分割的次数即：f(n) = min{f(n), f(n - k) + 1}。
和PerfectSquares一样，最后一段是未知的所以需要遍历。
在判断回文串时，如果直接在两个for循环中判断，总的时间复杂度将会变成O(n^3)，可以预先利用生成回文串的方式来判断以i开头,j结尾的子字符串是否为回文串即isPalin[i][j]。
生成回文串需要对奇偶情况都要进行考虑。