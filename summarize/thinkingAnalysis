ContainerWithMostWater:
运用双指针，当指针往中间移动，面积的长在减小，此时只有宽（高）增加时，面积才可能增加。而宽取决于左右指针中值较小的，所以值较小的指针要发生移动，而值较大的则不变。

LongestSubstringWithoutRepeatingCharacters：
运用隐式双指针：left，维护一个滑动窗口的左边界。右边界i增大，判断left-i的窗口中有无重复元素，自然想到hashset，但是又需要记录重复元素所在的位置，所以进化为hashmap。

ThreeSum;
解法一：循环两个值，用二分查找去寻找第三个值，时间复杂度n^2logn。难点：去重。二分搜索的数组起点为j，末尾为原数组的末尾。此时可以解决重复。
解法二：两个指针，一头一尾。再从头遍历数组，用首尾两个指针去匹配循环的值。难点：去重。
数组排序后可以通过移动首尾两个指针，逼近目标值：比目标值小时，向右移动头指针，比目标值大向左移动尾指针。

FourSum:
解法和ThreeSum类似，但要用用两重循环。去重时i和j都要去重。

ThreeSumCloset:
和ThreeSum思路一致。

NextPermutation:
https://pic.leetcode-cn.com/1df4ae7eb275ba4ab944521f99c84d782d17df804d5c15e249881bafcf106173-file_1555696082944，非常好的思路解释

FindFirstAndLastPositionOfElementInSortedArray:
二分查找和while循环搜索上下界（去重操作的变形）

CombinationSum:
使用深度优先算法搜索。难点：当搜索到一个值比差值（distance)大时，退出此次循环，stack深度-1，并且表明在该startIndex = i这一层没有符合条件的组合。
所以要把candidates[i]从listElement中取出。

combinationSum2：
与CombinationSum的区别：输入的数组会有重复元素，并且不能直接对数组去重；数组的同一个数不能够取多次。
因此，在添加结果时首先要检查返回的列表中是否有该元素，并且在dfs时每次的起点坐标要+1。

isValidBST:
典型的分治算法思想。把一个二叉树分成左右两棵子树进行处理。max和min通过递归，分别保存了当前深度下二叉树中的最大和最小值。
左子树的所有值必须要介于min和root.val之间。右字数必须在root.val和max之间。

RotateImage:
如何把一个方阵旋转90度。顺时针：先求转置，再沿着竖直中线折叠；逆时针：先求转置，再沿着水平中线折叠。

spiralOrder:
模拟路径，在矩阵中移动只有四个方向，在螺旋路径中，每次变换路径只有一种选择，因此可以用两个数组对应表示x,y坐标的移动变换。
用一个和矩阵大小一样的boolean矩阵，记录旋转路径。

SpiralMatrixII:
思路同上

JumpGame:
动态规划：每次移动到一个位置，将该位置标记为可到达。i标志需要判断的那个位置；j表示通过之前，并且在该位置移动nums[j]的距离能否到达i点。最后如果nums.length - 1不可达，则返回false。
贪心算法：保存一个farest标记最远可到达的位置，当一个点的坐标i+nums[i]>farest时更新。如果有一点i> farest则返回false表明改点不可达。

MergeIntervals:
先根据起点对区间数组进行排序，之后从第一个区间的左边界开始判断直到到达边界前一个区间：如果其小于i+1的右边界则i++,并且把右边界修改为更大的值。

uniquePaths：
动态规划。1,将到place[m][n]的所有方法的问题转化为到place[m-1][n]+place[m][n-1]的问题。2，开一个数组arriveWays，从起点开始每经过一个位置记录其到达的次数。3，最后返回arriveWays[m-1][n-1]。

UniquePathsII：
方法同上。在边界上要注意。

MinimumPathSum：
动态规划。方法同uniquePaths。

SetMatrixZeroes:
方法一：用列表存储矩阵中为零的数，在遍历列表中的坐标，把矩阵对应行列的坐标设为零。
方法二：把位置信息直接存储到矩阵中：若某一坐标元素为零，则将其对应行列的首坐标的值设为零。此时（0,0）可能由第一行或者第一列中一个为零的书产生。因此需要额外一个标记，区分是第一行还是第一列产生的。
然后遍历坐标，若发现行列的首坐标有一个为零，则将该行和该列全设为零。最后再判断第一行和第一列是否需要设置。

searchMatrixMethodTwo:
方法一：使用了两次二分搜索。
方法二：使用一次二分搜索。将矩阵的坐标，看成线性的数组坐标，进行值的判断时再使用“取商”和“取余”操作获得线性数组在矩阵中的坐标。